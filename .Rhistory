#MODELO FINAL
est.ar.wge(xB, p=10,method='burg') #s=4 (cant. raices cercanas a 1)
#MODELO FINAL
#seleccionamos el valor de s
est.ar.wge(xA12,p=16,method='burg')
#obtenemos la tabla de factores
factor.wge(phi=c(rep(0,3),1)) #(s=4)
factor.wge(phi=c(rep(0,11),1)) #s=12
#obtenemos la tabla de factores
factor.wge(phi=c(rep(0,3),1)) #(s=4)
#aplicamos diferencias para transformar los datos
s12=artrans.wge(logAP,phi.tr=c(rep(0,11),1))
s12d1=artrans.wge(s12,phi.tr=1)
# a) Graficamos los datos con sus autocorrelaciones y densidad de Parzen
plotts.sample.wge(patemp)
# 1-1.7267B+0.9971B^2    0.8659+-0.5032i      0.9985       0.0838
# 1-0.9007B              1.1103               0.9007       0.0000
# 1+0.1854B+0.8005B^2   -0.1158+-1.1117i      0.8947       0.2665
# 1-0.8397B+0.7441B^2    0.5642+-1.0127i      0.8626       0.1691
# 1+0.9827B+0.6948B^2   -0.7072+-0.9691i      0.8335       0.3503
# 1+1.5999B+0.6922B^2   -1.1557+-0.3304i      0.8320       0.4557
# 1+0.4007B             -2.4954               0.4007       0.5000
# 1-0.3283B              3.0459               0.3283       0.0000
# 1+0.1672B             -5.9806               0.1672       0.5000
#------------------------------------------------------------------------
est_p16 = est.ar.wge(patemp,p=16,method='burg')
# d) Con base al inciso anterior, ajustaremos un modelo ARIMA para estos datos
# y factorizaremos el modelo
#------------------- para p = 14 -------------------
# aplicamos diferencias para transformar los datos
s14 = artrans.wge(patemp,phi.tr=c(rep(0,10),1))
#aplicamos diferencias para transformar los datos
s12=artrans.wge(logAP,phi.tr=c(rep(0,11),1))
s12d1=artrans.wge(s12,phi.tr=1)
# d) Con base al inciso anterior, ajustaremos un modelo ARIMA para estos datos
# y factorizaremos el modelo
#------------------- para p = 14 -------------------
# aplicamos diferencias para transformar los datos
s14 = artrans.wge(patemp,phi.tr=c(rep(0,10),1))  #en este caso s=11
sn = artrans.wge(s14, phi.tr=1)
# d) Con base al inciso anterior, ajustaremos un modelo ARIMA para estos datos
# y factorizaremos el modelo
#------------------- para p = 14 -------------------
# aplicamos diferencias para transformar los datos
s14 = artrans.wge(patemp,phi.tr=c(rep(0,10),1)) #en este caso s=11
aic.wge(sB4,p=0:10,q=0:2) #fit un arma (p,q)
aic.wge(s14,p=0:10,q=0:2) #fit un arma (p,q)
model = auto.arima(patemp)
library(forecast)
model = auto.arima(patemp)
model
aic5.wge(s14,p=0:10,q=0:2) #fit un arma (p,q)
est.arma.wge(s14,p=2, q=12) #estimamos los parámetros del modelo
# Factor                 Roots                Abs Recip    System Freq
# 1+1.3237B+1.0000B^2   -0.6618+-0.7496i      1.0000       0.3651
# 1-1.0000B              1.0000               1.0000       0.0000
# 1-0.7532B+0.9697B^2    0.3884+-0.9383i      0.9847       0.1875
# 1+1.8534B+0.9406B^2   -0.9853+-0.3041i      0.9698       0.4524
# 1+0.2802B+0.9312B^2   -0.1504+-1.0253i      0.9650       0.2732
# 1-1.1504B+0.7818B^2    0.7357+-0.8589i      0.8842       0.1373
# 1-0.7820B              1.2788               0.7820       0.0000
#-------------------------------------------------------------------------------
# Manera que ajusta un ARIMA
model = auto.arima(patemp)
model
# ARIMA(2,0,1) with non-zero mean
#
# Coefficients:
#   ar1      ar2      ma1     mean
# 1.7078  -0.9679  -0.7554  52.5526
# s.e.  0.0169   0.0161   0.0370   0.2679
#
# sigma^2 = 14.25:  log likelihood = -495.06
# AIC=1000.11   AICc=1000.46   BIC=1016.08
#-------------------------------------------------------------------------------
factor.wge(model)
model$coef
model$var.coef
#------------------- para p = 16 -------------------
# Manera en que lo hace el libro:
# aplicamos diferencias para transformar los datos
s16 = artrans.wge(patemp,phi.tr=c(rep(0,11),1))#en este caso s=12
# fit un arma (p,q)=arima(p,0,q)
aic5.wge(s16,p=0:10,q=0:2)  #en este caso obtuvimos ARIMA(2,0,2)
# fit un arma (p,q)=arima(p,0,q)
aic5.wge(s16,p=0:10,q=0:5)  #en este caso obtuvimos ARIMA(10,0,2)
est.arma.wge(s16,p=10, q=12) #estimamos los parámetros del modelo y factorizamos
# Factor                 Roots                Abs Recip    System Freq
# 1+0.0123B+1.0000B^2   -0.0062+-1.0000i      1.0000       0.2510
# 1+1.0000B             -1.0000               1.0000       0.5000
# 1-1.7338B+1.0000B^2    0.8669+-0.4985i      1.0000       0.0831
# 1-1.0000B              1.0000               1.0000       0.0000
# 1+1.7289B+1.0000B^2   -0.8645+-0.5027i      1.0000       0.4162
# 1-1.0426B+0.9459B^2    0.5511+-0.8680i      0.9726       0.1600
# 1+0.8783B+0.9284B^2   -0.4730+-0.9238i      0.9635       0.3253
#-------------------------------------------------------------------------------
# Manera que ajusta un ARIMA
model = auto.arima(patemp)#en este caso obtuvimos un ARIMA(2,0,1)
model
# a) Graficamos los datos con sus autocorrelaciones y densidad de Parzen
plotts.sample.wge(patemp)
# b) Implementamos la estimación del método Burg para p=14 y p=16
est_p14 = est.ar.wge(patemp,p=14,method='burg')
# b) Implementamos la estimación del método Burg para p=14 y p=16
est_p14 = est.ar.wge(patemp,p=14,method='burg')
# 1-1.7267B+0.9971B^2    0.8659+-0.5032i      0.9985       0.0838
# 1-0.9007B              1.1103               0.9007       0.0000
# 1+0.1854B+0.8005B^2   -0.1158+-1.1117i      0.8947       0.2665
# 1-0.8397B+0.7441B^2    0.5642+-1.0127i      0.8626       0.1691
# 1+0.9827B+0.6948B^2   -0.7072+-0.9691i      0.8335       0.3503
# 1+1.5999B+0.6922B^2   -1.1557+-0.3304i      0.8320       0.4557
# 1+0.4007B             -2.4954               0.4007       0.5000
# 1-0.3283B              3.0459               0.3283       0.0000
# 1+0.1672B             -5.9806               0.1672       0.5000
#-------------------------------------------------------------------------------
est_p16 = est.ar.wge(patemp,p=16,method='burg')
# d) Con base al inciso anterior, ajustaremos un modelo ARIMA para estos datos
# y factorizaremos el modelo
#------------------- para p = 14 -------------------
# Manera en que lo hace el libro:
# aplicamos diferencias para transformar los datos
s14 = artrans.wge(patemp,phi.tr=c(rep(0,10),1))#en este caso s=11
# fit un arma (p,q)=arima(p,0,q)
aic5.wge(s14,p=0:10,q=0:2)  #en este caso obtuvimos ARIMA(2,0,2)
est.arma.wge(s14,p=2, q=12) #estimamos los parámetros del modelo y factorizamos
#------------------- para p = 16 -------------------
# Manera en que lo hace el libro:
# aplicamos diferencias para transformar los datos
s16 = artrans.wge(patemp,phi.tr=c(rep(0,11),1))#en este caso s=12
patemp
180/14
180/15
est16 = est.arma.wge(s16,p=10, q=12) #estimamos los parámetros del modelo y factorizamos
est14 = est.arma.wge(s14,p=2, q=12) #estimamos los parámetros del modelo y factorizamos
12*5
# Primero es importante tener en cuenta que la base de datos tiene un dato por
# mes durante 15 años, por lo que si queremos pronosticar 5 años, necesitamos
# pronosticar 12*5=60 datos, así observemos que
roll.win.rmse.wge(patemp, s = 11, d = 1, phi = est16$phi, horizon = 60)
# Primero es importante tener en cuenta que la base de datos tiene un dato por
# mes durante 15 años, por lo que si queremos pronosticar 5 años, necesitamos
# pronosticar 12*5=60 datos, así observemos que
roll.win.rmse.wge(patemp, s = 11, d = 1, phi = est16$phi, horizon = 5)
# Primero es importante tener en cuenta que la base de datos tiene un dato por
# mes durante 15 años, por lo que si queremos pronosticar 5 años, necesitamos
# pronosticar 12*5=60 datos, así observemos que
roll.win.rmse.wge(patemp, s = 11, d = 1, phi = est16$phi, horizon = 5)
# e)
ts(patemp, start = 1990, end = 2004,frequency = 12)
patemp
# e)
ts(patemp, start = c(1,1990), end =(12,2004),frequency = 12)
# e)
ts(patemp, start = c(1,1990), end =c(12,2004),frequency = 12)
# e)
ts(patemp, start = c(1990,1), end =c(2004,12),frequency = 12)
# e)
pat = ts(patemp, start = c(1990,1), end =c(2004,12),frequency = 12)
# Primero es importante tener en cuenta que la base de datos tiene un dato por
# mes durante 15 años, por lo que si queremos pronosticar 5 años, necesitamos
# pronosticar 12*5=60 datos, así observemos que
roll.win.rmse.wge(pat, s = 11, d = 1, phi = est16$phi, horizon = 5)
pat
# e) Calcularemos el RMSE de los pronósticos de los próximos 5 años
roll.win.rmse.wge(pat, s = 11, d = 1, phi = est16$phi, horizon = 5)
# p = 16
roll.win.rmse.wge(patemp, s = 12, d = 1, phi = est16$phi, horizon = 5)
source("~/.active-rstudio-document", echo=TRUE)
# e) Calcularemos el RMSE de los pronósticos de los próximos 5 años
# p = 14
roll.win.rmse.wge(patemp, s = 11, d = 1, phi = est16$phi, horizon = 5)
# e) Calcularemos el RMSE de los pronósticos de los próximos 5 años
# p = 14
roll.win.rmse.wge(patemp, s = 11, d = 1, phi = est16$phi, horizon = 5)
# p = 16
roll.win.rmse.wge(patemp, s = 12, d = 1, phi = est16$phi, horizon = 5)
data(x.cos)
x.cos
#---------------
n=length(x.cos)
x = gen.sigplusnoise.wge(n=100, coef=c(A,B), freq=c(f,f), psi=c(0.0,0.0),
phi=.75, vara = var_a) #pag 147
var_a = 1.5
x = gen.sigplusnoise.wge(n=100, coef=c(A,B), freq=c(f,f), psi=c(0.0,0.0),
phi=.75, vara = var_a) #pag 147
A = 5*cos(pi/3)
B = -5*sin(pi/3)
f = 0.1   #pag 362
var_a = 1.5
x = gen.sigplusnoise.wge(n=100, coef=c(A,B), freq=c(f,f), psi=c(0.0,0.0),
phi=.75, vara = var_a) #pag 147
est.ar.wge(x, p=10, method = 'burg')
#---------------
n=length(x.cos)
######## PROBLEMA 2 ########
# a) Ajuste un modelo Cosine Signal + Noise
# primero calculamos el tamaño de nuestra base de datos
n=length(patemp)
n
z=gen.arma.wge(n=100,phi=.75,sn=921,vara=1.5)
time=1:100
sig.cos=5*cos(2*pi*.1*time+pi/3)
x.cos=sig.cos+z
x.cosa
x.cos
patemp
h1=rep(0,n)
h2=rep(0,n)
180/15
100/10
# observando la gráfica de los datos podemos ver que realiza alrededor de 15
# ciclos en una realización de tamaño 180, por lo que se sugiere una frecuencia
# f= .12
f.e st=.12
# observando la gráfica de los datos podemos ver que realiza alrededor de 15
# ciclos en una realización de tamaño 180, por lo que se sugiere una frecuencia
# f= .12
f.est=.12
#calculamos H1= cos(2πft)  y H2=sin(2πft)
for(t in 1:n) h1[t]=cos(2*pi*f.est*t)
for(t in 1:n) h2[t]=sin(2*pi*f.est*t)
#estimamos los parámetros C_0, A y B
h.est=lm(x.cos~h1+h2)
#estimamos los parámetros C_0, A y B
h.est=lm(patemp~h1+h2)
(patemp~h1+h2)
#estimamos los parámetros C_0, A y B
h.est=lm(patemp~h1+h2)
h.est$coefficients[k]
h.est$coefficients
h.est$coefficients[1]
h.est$coefficients
# calculamos los residuos
z.cos=rep(0,n)
C0=h.est$coefficients[1]
A=h.est$coefficients[2]
B=h.est$coefficients[3]
for(t in 1:n) z.cos[t]=x.cos[t]-C0-A*h1[t]-B*h2[t]
#ajustamos un modelo AR
z.cos.aic = aic.wge(z.cos,p=1:5)
#ajustamos un modelo AR
z.cos.aic = aic.wge(z.cos,p=1:5)
for(t in 1:n) z.cos[t]=x.cos[t]-C0-A*h1[t]-B*h2[t]
#ajustamos un modelo AR
z.cos.aic = aic.wge(z.cos,p=1:5)
#ajustamos un modelo AR
z.cos.aic = aic.wge(z.cos,p=1:5)
# calculamos los residuos
z.cos=rep(0,n)
for(t in 1:n) z.cos[t]=patemp[t]-C0-A*h1[t]-B*h2[t]
#ajustamos un modelo AR
z.cos.aic = aic.wge(z.cos,p=1:5)
z.cos.aic
ar.cos=est.ar.wge(z.cos,p=z.cos.aic$p)
#resuduos
ar.cos$res
h1
h2
h.est
z.cos
z.cos.aic
ar.cos
#resuduos
ar.cos$res
# b) Realizamos forecasting
f.ar.cos=fore.arma.wge(ar.cos$res,ar.cos$phi,n.ahead=6)
# b) Realizamos forecasting
f.ar.cos=fore.arma.wge(ar.cos$res,ar.cos$phi,n.ahead=90)
# b) Realizamos forecasting
f.ar.cos=fore.arma.wge(ar.cos$res,ar.cos$phi,n.ahead=60)
# b) Realizamos forecasting
f.ar.cos=fore.arma.wge(ar.cos$res,ar.cos$phi,n.ahead=72)
6*12
#ajustamos un modelo AR
z.cos.aic = aic.wge(z.cos,p=1:5)
ar.cos=est.ar.wge(z.cos,p=z.cos.aic$p)
# b) Realizamos forecasting, como queremos ver el pronóstico de los próximos 6
# ciclos, buscamos obtener el comportamiento de los próximos 6*12=72 datos
# ya que cada ciclo contiene 12 datos como lo habíamos mencionado antes
f.ar.cos=fore.arma.wge(ar.cos$res,ar.cos$phi,n.ahead=72)
# por último comparamos con los datos reales
roll.win.rmse.wge(patemp, s = 12, d = 1, phi = est16$phi, horizon = 72)
# por último comparamos con los datos reales
roll.win.rmse.wge(patemp, s = 12, d = 1, phi = est16$phi, horizon = 6)
# b) Realizamos forecasting, como queremos ver el pronóstico de los próximos 6
# ciclos, buscamos obtener el comportamiento de los próximos 6*12=72 datos
# ya que cada ciclo contiene 12 datos como lo habíamos mencionado antes
f.ar.cos=fore.arma.wge(ar.cos$res,ar.cos$phi,n.ahead=72)
# por último comparamos con los datos reales
roll.win.rmse.wge(patemp, s = 12, d = 1, phi = est16$phi, horizon = 72)
# por último comparamos con los datos reales
roll.win.rmse.wge(patemp, s = 12, d = 1, phi = est16$phi, horizon = 6)
fore.arima.wge(patemp, n.ahead = 6)
# por último comparamos con los datos reales
roll.win.rmse.wge(patemp, s = 12, d = 1, phi = est16$phi, horizon = 72)
fore.arima.wge(patemp, n.ahead = 72)
# b) Realizamos forecasting, como queremos ver el pronóstico de los próximos 6
# ciclos, buscamos obtener el comportamiento de los próximos 6*12=72 datos
# ya que cada ciclo contiene 12 datos como lo habíamos mencionado antes
f.ar.cos=fore.arma.wge(ar.cos$res,ar.cos$phi,n.ahead=72)
forecast(patemp)
forecast(patemp)
forecast(patemp, n.ahead=20)
# b) Realizamos forecasting, como queremos ver el pronóstico de los próximos 6
# ciclos, buscamos obtener el comportamiento de los próximos 6*12=72 datos
# ya que cada ciclo contiene 12 datos como lo habíamos mencionado antes
f.ar.cos=fore.arma.wge(ar.cos$res,ar.cos$phi,n.ahead=72)
#Examen 3
library(igraph)
#1 a)
#####DIJSKTRA
gr <- make_graph(c(1,2,1,4, ),
n=7, directed = T, )
#1 a)
#####DIJSKTRA
gr <- make_graph(c(1,2,1,4,1,5,2,3,2,5,2,6,3,4,3,6,4,6,4,7,5,6,5,7,6,7),
n=7, directed = T, )
#1 a)
#####DIJSKTRA
gr <- make_graph(c(1,2,1,4,1,5,2,3,2,5,2,6,3,4,3,6,4,6,4,7,5,6,5,7,6,7),
n=7, directed = T )
E(gr)$weight <- c(10,1,5,9,8,10,3,4,5,4,7,3,8)
E(gr)$label = E(gr)$weight
plot(gr)
#aplicamos dijkstra
sp <- shortest.paths(gr, algorithm = "dijkstra", mode = "out")
all_shortest_paths(
gr,
V(gr)[2],
to = V(gr)[5],
mode = c("out"),
weights = NULL
)
distances(
gr,
v = V(gr)[1],
to = V(gr)[2],
mode = c("out"),
weights = E(gr)$weight,
algorithm = c("dijkstra")
)
distances(
gr,
v = V(gr)[1],
to = V(gr)[7],
mode = c("out"),
weights = E(gr)$weight,
algorithm = c("dijkstra")
)
#ruta más corta del vértice 1 al 7
all_shortest_paths(
gr,
V(gr)[1],
to = V(gr)[7],
mode = c("out"),
weights = NULL
)
distances(
gr,
v = V(gr)[1],
to = V(gr)[7],
mode = c("out"),
weights = E(gr)$weight,
algorithm = c("dijkstra")
)
x = matrix(c(70,-2,-2,166), byrow = T,ncol = 2)
x
eigen(x)
70*166
166+70
236^2
11620*4
55696-46480
sqrt(9216)
236+96
(236+96)/2
(236-96)/2
eigen(x)
36*3
48*4
300/25
SP
sp
#ruta más corta del vértice 1 al 7
all_shortest_paths(
gr,
V(gr)[1],
to = V(gr)[7],
mode = c("out"),
weights = NULL
)
#distancia del recorrido más corto
distances(
gr,
v = V(gr)[1],
to = V(gr)[7],
mode = c("out"),
weights = E(gr)$weight,
algorithm = c("dijkstra")
)
#distancia del recorrido más corto
distances(
gr,
v = V(gr)[1],
to = V(gr)[7],
mode = c("out"),
weights = E(gr)$weight,
algorithm = c("dijkstra")
)
libPaths()
install.packages("stringi")
install.packages("C:\Users\jenni\Downloads\stringi_1.7.12.zip", repos = NULL, type = "source")
install.packages("C:\Users\jenni\Downloads\stringi_1.7.12.zip",repos = NULL,type = "source")
install.packages("\Users\jenni\Downloads\stringi_1.7.12.zip",repos = NULL,type = "source")
install.packages("C:\Users\jenni\Downloads\stringi_1.7.12.zip",type = "source")
install.packages("\Users\jenni\Downloads\stringi_1.7.12.zip",repos = NULL,type)
install.packages("\Users\jenni\Downloads\stringi_1.7.12.zip")
install.packages("C:\Users\jenni\Downloads\stringi_1.7.12.zip")
install.packages("C:\\Users\\jenni\\Downloads\\stringi_1.7.12.zip")
install.packages("C:\\Users\\jenni\\Downloads\\stringi_1.7.12.zip", repos = NULL, type = "source")
library(stringi)
funcion_mediana <- function(datos) {
n <- length(datos)
dat <- sort(datos)
if (n %% 2 == 0) {
mediana <- (dat[n/2] + dat[n/2 + 1/2])/2
} else {
mediana <- dat[n/2 + 1/2]
}
return(mediana)
}
funcion_media <- function(datos) {
media <- sum(dat) / length(dat)
return(media)
}
datos <- c(1.7, 2.2, 3.9, 3.11, 14.7)
funcion_mediana(datos_ordenados, k)
funcion_mediana(datos)
median(datos)
funcion_media(datos)
funcion_media <- function(datos) {
media <- sum(dat) / length(dat)
return(media)
}
funcion_media(datos)
funcion_media <- function(dat) {
media <- sum(dat) / length(dat)
return(media)
}
funcion_media(datos)
mean(datos)
which git
library(readxl)
library(dplyr)
library(plotly)
data <- read_excel("Datos.xlsx")
fig <- plot_ly(data, labels = ~Producto, values = ~Cantidad, type='pie')
fig <- fig %>% layout(title = 'Ventas',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
fig
library(readxl)
library(dplyr)
library(plotly)
data <- read_excel("Datos.xlsx")
fig <- plot_ly(data, labels = ~Producto, values = ~Cantidad, type='pie')
fig <- fig %>% layout(title = 'Ventas',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
fig
library(leaflet)
leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
setwd("~/Tesis/quarto/Qu_book")
setwd("~/Tesis/quarto/Qu_book")
library(plotly)
stock <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')
fig <- plot_ly(stock, type = 'scatter', mode = 'lines')%>%
add_trace(x = ~Date, y = ~AAPL.High)%>%
layout(showlegend = F)
fig <- fig %>%
layout(
xaxis = list(zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
plot_bgcolor='#e5ecf6', width = 900)
fig
library(plotly)
stock <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')
fig <- plot_ly(stock, type = 'scatter', mode = 'lines')%>%
add_trace(x = ~Date, y = ~AAPL.High)%>%
layout(showlegend = F)
fig <- fig %>%
layout(
xaxis = list(zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
plot_bgcolor='#e5ecf6', width = 900)
fig
library(leaflet)
leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
install.packages("JuliaCall")
install.packages("Julia")
